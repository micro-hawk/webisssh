{"remainingRequest":"/home/microhawk/github/webish/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/microhawk/github/webish/client/components/swaggerApiDoc/swagger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/microhawk/github/webish/client/components/swaggerApiDoc/swagger.vue","mtime":1662182788537},{"path":"/home/microhawk/github/webish/node_modules/cache-loader/dist/cjs.js","mtime":1662182844115},{"path":"/home/microhawk/github/webish/node_modules/babel-loader/lib/index.js","mtime":1662182845501},{"path":"/home/microhawk/github/webish/node_modules/cache-loader/dist/cjs.js","mtime":1662182844115},{"path":"/home/microhawk/github/webish/node_modules/vue-loader/lib/index.js","mtime":1662182845851}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKaW1wb3J0IEFwaURvY3MgZnJvbSAnLi9zd2FnZ2VyL2FwaURvY3MudnVlJwppbXBvcnQgRG9jQ29tcGlsZUVycm9yIGZyb20gJy4vc3dhZ2dlci9kb2NDb21waWxlRXJyb3IudnVlJwppbXBvcnQgTG9hZGluZ1NlcnZlciBmcm9tICcuL3N3YWdnZXIvbG9hZGluZ1NlcnZlci52dWUnCmltcG9ydCBub1NlcnZlciBmcm9tICcuL3N3YWdnZXIvbm9TZXJ2ZXIudnVlJwppbXBvcnQgU2VydmVyRXJyb3IgZnJvbSAnLi9zd2FnZ2VyL3NlcnZlckVycm9yLnZ1ZScKCmltcG9ydCBzd2FnZ2VyRG9jRm9ybWF0dGVyIGZyb20gJ0AvaGVscGVyL3N3YWdnZXItZG9jLmpzJwppbXBvcnQgb3BlbmFwaURvY0Zvcm1hdHRlciBmcm9tICdAL2hlbHBlci9vcGVuYXBpLWRvYy5qcycKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsgRG9jQ29tcGlsZUVycm9yLCBMb2FkaW5nU2VydmVyLCBub1NlcnZlciwgU2VydmVyRXJyb3IsIEFwaURvY3MgfSwKICBuYW1lOiAnU3dhZ2dlcicsCiAgZGF0YTogKCkgPT4gKHsKICAgIG9wZW5TZXJ2ZXI6ICcnLAogICAgc3RhdHVzOiAyLAogICAgZXJyb3I6IHt9LAogICAgY29tcGlsZUVycm9yOiBmYWxzZSwKICAgIGFwaURvY3M6IG51bGwsCiAgICBjb21waWxlRXJyb3JNZXNzYWdlOiAnJwogIH0pLAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBTdGF0ZSgnc3dhZ2dlcicsIFsnc2VydmVyTGlzdCddKSwKICAgIHNlbGVjdGVkU2VydmVyICgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2VydmVyTGlzdFt0aGlzLm9wZW5TZXJ2ZXJdIHx8IG51bGwKICAgIH0sCiAgICBzaG93TG9hZGluZ1NlcnZlciAoKSB7CiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkU2VydmVyICYmIHRoaXMuc3RhdHVzID09PSAwCiAgICB9LAogICAgc2hvd1NlcnZlckVycm9yICgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRTZXJ2ZXIgJiYgdGhpcy5zdGF0dXMgPT09IC0xCiAgICB9LAogICAgc2hvd0NvbXBpbGVFcnJvciAoKSB7CiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkU2VydmVyICYmIHRoaXMuc3RhdHVzID09PSAxICYmIHRoaXMuY29tcGlsZUVycm9yCiAgICB9LAogICAgc2hvd0FwaURvYyAoKSB7CiAgICAgIHJldHVybiAhdGhpcy5zaG93Q29tcGlsZUVycm9yCiAgICB9CiAgfSwKICB3YXRjaDogewogICAgb3BlblNlcnZlciAoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkU2VydmVyKSB7CiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdzd2FnZ2VyL1NFVF9TRUxFQ1RFRF9TRVJWRVInLCB0aGlzLnNlbGVjdGVkU2VydmVyKQogICAgICAgIHRoaXMuZmV0Y2hBcGlEb2NzKCkKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgY2hhbmdlU2VydmVyICgpIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICcnLAogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBzZXJ2ZXI6IHRoaXMub3BlblNlcnZlcgogICAgICAgIH0KICAgICAgfSkKICAgIH0sCiAgICBmZXRjaENvbXBsZXRlZCAocmVzKSB7CiAgICAgIGlmIChyZXMuZGF0YS5lcnJvcikgewogICAgICAgIHRoaXMuc3RhdHVzID0gLTEKICAgICAgICB0aGlzLmVycm9yID0gcmVzLmRhdGEuZXJyb3JNZXNzYWdlCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoaXMuYXBpRG9jcyA9IHJlcy5kYXRhLnJlc3BvbnNlQm9keS5vcGVuYXBpID8KICAgICAgICAgICAgb3BlbmFwaURvY0Zvcm1hdHRlcihyZXMuZGF0YS5yZXNwb25zZUJvZHkpIDoKICAgICAgICAgICAgc3dhZ2dlckRvY0Zvcm1hdHRlcihyZXMuZGF0YS5yZXNwb25zZUJvZHkpCiAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3N3YWdnZXIvU0VUX0FQSV9ET0MnLCB0aGlzLmFwaURvY3MpCiAgICAgICAgICB0aGlzLmNvbXBpbGVFcnJvciA9IGZhbHNlCiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5lcnJvcihlKQogICAgICAgICAgdGhpcy5jb21waWxlRXJyb3JNZXNzYWdlID0gZS5tZXNzYWdlCiAgICAgICAgICB0aGlzLmNvbXBpbGVFcnJvciA9IHRydWUKICAgICAgICB9CiAgICAgICAgdGhpcy5zdGF0dXMgPSAxCiAgICAgIH0KICAgIH0sCiAgICBmZXRjaEFwaURvY3MgKCkgewogICAgICB0aGlzLnN0YXR1cyA9IDAKICAgICAgY29uc3Qgc2VsZiA9IHRoaXMKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ3N3YWdnZXIvZ2V0U2VydmVyQXBpRG9jJywgewogICAgICAgIHNlcnZlcjogewogICAgICAgICAgbmFtZTogc2VsZi5zZWxlY3RlZFNlcnZlci5uYW1lLAogICAgICAgICAgcHJvdG86IHNlbGYuc2VsZWN0ZWRTZXJ2ZXIucHJvdG8sCiAgICAgICAgICBlbmRwb2ludDogc2VsZi5zZWxlY3RlZFNlcnZlci5lbmRwb2ludCwKICAgICAgICAgIGRvY1BhdGg6IHNlbGYuc2VsZWN0ZWRTZXJ2ZXIuZG9jUGF0aAogICAgICAgIH0sCiAgICAgICAgY2I6IHRoaXMuZmV0Y2hDb21wbGV0ZWQKICAgICAgfSkKICAgIH0KICB9LAogIGNyZWF0ZWQgKCkgewogICAgdGhpcy5vcGVuU2VydmVyID0gdGhpcy4kcm91dGUucXVlcnkuc2VydmVyIHx8ICcnCiAgfQp9Cg=="},{"version":3,"sources":["swagger.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"swagger.vue","sourceRoot":"client/components/swaggerApiDoc","sourcesContent":["<template>\n  <div class=\"api-docs pb-20\">\n    <div class=\"v-center space-between my-5\">\n      <h2 class=\"tx-x-lg tx-light\">Select your server</h2>\n      <div class=\"p-input\">\n        <select v-model=\"openServer\" @change=\"changeServer\">\n          <option v-for=\"server in serverList\" :key=\"server.id\" :value=\"server.id\">{{server.name}}</option>\n        </select>\n        <label>Server</label>\n      </div>\n    </div>\n    <no-server v-if=\"!selectedServer\"/>\n    <loading-server v-else-if=\"showLoadingServer\"/>\n    <server-error :error=\"error\" v-else-if=\"showServerError\" @retry=\"fetchApiDocs\"/>\n    <doc-compile-error :error=\"{message: compileErrorMessage, }\" v-else-if=\"showCompileError\"/>\n    <api-docs v-else :apiDocs=\"apiDocs\"/>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport ApiDocs from './swagger/apiDocs.vue'\nimport DocCompileError from './swagger/docCompileError.vue'\nimport LoadingServer from './swagger/loadingServer.vue'\nimport noServer from './swagger/noServer.vue'\nimport ServerError from './swagger/serverError.vue'\n\nimport swaggerDocFormatter from '@/helper/swagger-doc.js'\nimport openapiDocFormatter from '@/helper/openapi-doc.js'\nexport default {\n  components: { DocCompileError, LoadingServer, noServer, ServerError, ApiDocs },\n  name: 'Swagger',\n  data: () => ({\n    openServer: '',\n    status: 2,\n    error: {},\n    compileError: false,\n    apiDocs: null,\n    compileErrorMessage: ''\n  }),\n  computed: {\n    ...mapState('swagger', ['serverList']),\n    selectedServer () {\n      return this.serverList[this.openServer] || null\n    },\n    showLoadingServer () {\n      return this.selectedServer && this.status === 0\n    },\n    showServerError () {\n      return this.selectedServer && this.status === -1\n    },\n    showCompileError () {\n      return this.selectedServer && this.status === 1 && this.compileError\n    },\n    showApiDoc () {\n      return !this.showCompileError\n    }\n  },\n  watch: {\n    openServer () {\n      if (this.selectedServer) {\n        this.$store.commit('swagger/SET_SELECTED_SERVER', this.selectedServer)\n        this.fetchApiDocs()\n      }\n    }\n  },\n  methods: {\n    changeServer () {\n      this.$router.push({\n        path: '',\n        query: {\n          server: this.openServer\n        }\n      })\n    },\n    fetchCompleted (res) {\n      if (res.data.error) {\n        this.status = -1\n        this.error = res.data.errorMessage\n      } else {\n        try {\n          this.apiDocs = res.data.responseBody.openapi ?\n            openapiDocFormatter(res.data.responseBody) :\n            swaggerDocFormatter(res.data.responseBody)\n          this.$store.commit('swagger/SET_API_DOC', this.apiDocs)\n          this.compileError = false\n        } catch (e) {\n          console.error(e)\n          this.compileErrorMessage = e.message\n          this.compileError = true\n        }\n        this.status = 1\n      }\n    },\n    fetchApiDocs () {\n      this.status = 0\n      const self = this\n      this.$store.dispatch('swagger/getServerApiDoc', {\n        server: {\n          name: self.selectedServer.name,\n          proto: self.selectedServer.proto,\n          endpoint: self.selectedServer.endpoint,\n          docPath: self.selectedServer.docPath\n        },\n        cb: this.fetchCompleted\n      })\n    }\n  },\n  created () {\n    this.openServer = this.$route.query.server || ''\n  }\n}\n</script>\n\n<style>\n\n</style>"]}]}