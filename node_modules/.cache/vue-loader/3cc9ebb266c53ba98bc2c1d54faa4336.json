{"remainingRequest":"/home/microhawk/github/webish/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/microhawk/github/webish/node_modules/v-jsoneditor/src/VueJsoneditor.vue?vue&type=style&index=0&id=43c7e374&lang=css&scoped=true&","dependencies":[{"path":"/home/microhawk/github/webish/node_modules/v-jsoneditor/src/VueJsoneditor.vue","mtime":1662182850385},{"path":"/home/microhawk/github/webish/node_modules/css-loader/dist/cjs.js","mtime":1662182844921},{"path":"/home/microhawk/github/webish/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1662182846321},{"path":"/home/microhawk/github/webish/node_modules/postcss-loader/src/index.js","mtime":1662182845451},{"path":"/home/microhawk/github/webish/node_modules/cache-loader/dist/cjs.js","mtime":1662182844115},{"path":"/home/microhawk/github/webish/node_modules/vue-loader/lib/index.js","mtime":1662182845851}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5qc29uZWRpdG9yLWNvbnRhaW5lci5tYXgtYm94IHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdG9wOiAwcHg7CiAgbGVmdDogMDsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7CiAgei1pbmRleDogMTAwMDA7Cn0KCi5qc29uZWRpdG9yLWNvbnRhaW5lci5taW4tYm94IHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbWluLXdpZHRoOiAzMDBweDsKICB3aWR0aDogMTAwJTsKfQoKLmpzb25lZGl0b3ItYm94IHsKICBoZWlnaHQ6IDEwMCU7Cn0KCi5qc29uZWRpdG9yLWNvbnRhaW5lcjpob3ZlciAubWF4LWJ0biB7CiAgZGlzcGxheTogYmxvY2s7Cn0KCi5tYXgtYnRuIHsKICBkaXNwbGF5OiBub25lOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDdweDsKICByaWdodDogMTEwcHg7CiAgY29sb3I6ICNmZmY7CiAgd2lkdGg6IDI0cHg7CiAgaGVpZ2h0OiAyNHB4OwogIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMCkgdXJsKC4vYXNzZXRzL3BsdXMuc3ZnKSBuby1yZXBlYXQ7CiAgYmFja2dyb3VuZC1wb3NpdGlvbjogM3B4OwogIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMCk7CiAgYm9yZGVyLXJhZGl1czogM3B4Owp9Ci5tYXgtYnRuOmhvdmVyIHsKICBib3JkZXI6IDFweCBzb2xpZCAjZDdlNmZlOwp9Cg=="},{"version":3,"sources":["VueJsoneditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueJsoneditor.vue","sourceRoot":"node_modules/v-jsoneditor/src","sourcesContent":["<template lang=\"html\">\n    <div class=\"jsoneditor-container\" :class=\"{'max-box':max,'min-box':!max}\" :style=\"getHeight\">\n        <div ref=\"jsoneditor\" class=\"jsoneditor-box\"></div>\n        <button type=\"button\" @click=\"max = !max\" class=\"max-btn\" size=\"mini\" v-if=\"options.mode == 'code' && plus\"></button>\n    </div>\n</template>\n\n<script>\nimport JSONEditor from \"jsoneditor/dist/jsoneditor.min.js\"\nimport 'jsoneditor/dist/jsoneditor.min.css'\nexport default {\n  name: \"v-jsoneditor\",\n  data() {\n    return {\n      editor: null,\n      style: {},\n      max: false,\n      internalChange: false\n    }\n  },\n  props: {\n    options: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    value: [Object, Array, Number, String, Boolean],\n    height: {\n      type: String\n    },\n    plus: {\n      type: Boolean,\n      default: true\n    }\n  },\n  methods: {\n    onChange() {\n      let error = null\n      let json = {}\n      try {\n        json = this.editor.get()\n      } catch (err) {\n        error = err\n      }\n      if (error) {\n        this.$emit(\"error\", error)\n      } else {\n        if (this.editor) {\n          this.internalChange = true\n          this.$emit(\"input\", json)\n          this.$nextTick(() => {\n            this.internalChange = false\n          })\n        }\n      }\n      this.options.onChange && this.options.onChange(...arguments)\n    },\n    initView() {\n      if (!this.editor) {\n        var container = this.$refs.jsoneditor\n        let cacheChange = this.options.onChange\n        delete this.options.onChange\n        const options = Object.assign(this.options, {\n          onChange: this.onChange\n        })\n        this.editor = new JSONEditor(container, options)\n        this.options.onChange = cacheChange\n      }\n      this.editor.set(this.value !== undefined ? this.value : {})\n    },\n    destroyView() {\n      if (this.editor) {\n        this.editor.destroy()\n        this.editor = null\n      }\n    }\n  },\n  watch: {\n    value: {\n      handler(value) {\n        if (this.editor && value !== undefined && !this.internalChange) {\n          this.editor.set(value)\n        }\n      },\n      deep: true\n    },\n    max(value) {\n      this.$nextTick(() => {\n        this.initView()\n      })\n    },\n    options: {\n      handler (value) {\n        if (this.options && this.options.mode && this.editor) {\n          this.editor.setMode(this.options.mode)\n        }\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.initView()\n  },\n  beforeDestroy() {\n    this.destroyView()\n  },\n  computed: {\n    getHeight() {\n      if (this.height && !this.max) {\n        return {\n          height: this.height\n        }\n      }\n      return {}\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\n.jsoneditor-container.max-box {\n  position: fixed;\n  top: 0px;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10000;\n}\n\n.jsoneditor-container.min-box {\n  position: relative;\n  min-width: 300px;\n  width: 100%;\n}\n\n.jsoneditor-box {\n  height: 100%;\n}\n\n.jsoneditor-container:hover .max-btn {\n  display: block;\n}\n\n.max-btn {\n  display: none;\n  position: absolute;\n  top: 7px;\n  right: 110px;\n  color: #fff;\n  width: 24px;\n  height: 24px;\n  background: rgba(0, 0, 0, 0) url(./assets/plus.svg) no-repeat;\n  background-position: 3px;\n  border: 1px solid rgba(0, 0, 0, 0);\n  border-radius: 3px;\n}\n.max-btn:hover {\n  border: 1px solid #d7e6fe;\n}\n</style>\n"]}]}