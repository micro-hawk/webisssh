{"remainingRequest":"/home/microhawk/github/webish/node_modules/babel-loader/lib/index.js!/home/microhawk/github/webish/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/microhawk/github/webish/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/microhawk/github/webish/client/views/JsonFormatter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/microhawk/github/webish/client/views/JsonFormatter.vue","mtime":1662182788547},{"path":"/home/microhawk/github/webish/node_modules/cache-loader/dist/cjs.js","mtime":1662182844115},{"path":"/home/microhawk/github/webish/node_modules/babel-loader/lib/index.js","mtime":1662182845501},{"path":"/home/microhawk/github/webish/node_modules/cache-loader/dist/cjs.js","mtime":1662182844115},{"path":"/home/microhawk/github/webish/node_modules/vue-loader/lib/index.js","mtime":1662182845851}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGpzb24gZnJvbSAnLi4vY29tcG9uZW50cy9lbGVtZW50cy9qc29uLnZ1ZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBqc29uOiBqc29uCiAgfSwKICBuYW1lOiAnSnNvbkZvcm1hdHRlcicsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGlucHV0VGV4dDogJ3t9JwogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBmb3JtYXR0ZWRKc29uOiBmdW5jdGlvbiBmb3JtYXR0ZWRKc29uKCkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBlcnJvcjogZmFsc2UsCiAgICAgICAgICBqc29uOiBKU09OLnBhcnNlKHRoaXMuaW5wdXRUZXh0KQogICAgICAgIH07CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgZXJyb3I6IHRydWUsCiAgICAgICAgICBqc29uOiB7CiAgICAgICAgICAgIEVSUk9SOiBlLm1lc3NhZ2UKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBmb3JtYXRlU3RyaW5nSnNvbjogZnVuY3Rpb24gZm9ybWF0ZVN0cmluZ0pzb24oKSB7CiAgICAgIHZhciBmb3JtYXR0ZWRKc29uID0gdGhpcy5mb3JtYXR0ZWRKc29uOwoKICAgICAgaWYgKCFmb3JtYXR0ZWRKc29uLmVycm9yKSB7CiAgICAgICAgdGhpcy5pbnB1dFRleHQgPSBKU09OLnN0cmluZ2lmeShmb3JtYXR0ZWRKc29uLmpzb24sIG51bGwsIDIpOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["JsonFormatter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAqBA,OAAA,IAAA,MAAA,iCAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GADA;AAEA,EAAA,IAAA,EAAA,eAFA;AAGA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,SAAA,EAAA;AADA,KAAA;AAAA,GAHA;AAMA,EAAA,QAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,UAAA;AACA,eAAA;AACA,UAAA,KAAA,EAAA,KADA;AAEA,UAAA,IAAA,EAAA,IAAA,CAAA,KAAA,CAAA,KAAA,SAAA;AAFA,SAAA;AAIA,OALA,CAKA,OAAA,CAAA,EAAA;AACA,eAAA;AACA,UAAA,KAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA;AACA,YAAA,KAAA,EAAA,CAAA,CAAA;AADA;AAFA,SAAA;AAMA;AACA;AAfA,GANA;AAuBA,EAAA,OAAA,EAAA;AACA,IAAA,iBADA,+BACA;AACA,UAAA,aAAA,GAAA,KAAA,aAAA;;AACA,UAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACA,aAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AACA;AACA;AANA;AAvBA,CAAA","sourcesContent":["<template>\n  <div class=\"formatter bg-s py-2 pb-13\">\n    <div class=\"json-formatter\">\n      <h2 class=\"tx-x-lg tx-light mr-4 mb-3\">JSON Formatter</h2>\n      <div class=\"flex space-between\">\n        <div class=\"json-formatter__input\" >\n          <h3 class=\"ml-2 tx-o2 py-1\">Input</h3>\n          <textarea v-model=\"inputText\" @change=\"formateStringJson\" placeholder=\"Add your JSON\"></textarea>\n        </div>\n        <div class=\"pt-5 px-3 json-formatter__action\">\n        </div>\n        <div class=\"json-formatter__output\" >\n          <h3 class=\"ml-2 tx-o2 py-1\">Output</h3>\n          <json :full=\"true\" v-model=\"formattedJson.json\" :resize=\"false\"/>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport json from '../components/elements/json.vue'\nexport default {\n  components: { json },\n  name: 'JsonFormatter',\n  data: () => ({\n    inputText: '{}'\n  }),\n  computed: {\n    formattedJson () {\n      try {\n        return {\n          error: false,\n          json: JSON.parse(this.inputText)\n        }\n      } catch (e) {\n        return {\n          error: true,\n          json: {\n            ERROR: e.message\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    formateStringJson () {\n      const formattedJson = this.formattedJson\n      if (!formattedJson.error) {\n        this.inputText = JSON.stringify(formattedJson.json, null, 2)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.json-formatter {\n  max-width: 1000px;\n  margin: 20px auto;\n  & > div {\n    height: calc(100vh - 200px);\n  }\n  &__input, &__output {\n    width: calc(50% - 5px);\n  }\n  &__input {\n    textarea {\n      height: 100%;\n      width: 100%;\n      border: 0px;\n      padding: 8px;\n      font-size: 16px;\n      border-radius: 12px;\n      &:focus {\n        outline: none;\n      }\n    }\n  }\n  &__output {\n    .pika-json-view {\n      height: 100% !important;\n    }\n  }\n  &__action {\n    width: 10px;\n  }\n  &_compile-error {\n    background: rgba(red, 0.1);\n  }\n}\n</style>\n"],"sourceRoot":"client/views"}]}